---
name: Build

on:
  push:
    branches:
      - master
  pull_request:
  workflow_dispatch:

concurrency:
  group: build-${{ github.ref }}
  cancel-in-progress: true

env:
  C2_ENABLE_LTO: ${{ github.ref == 'refs/heads/master' }}
  CHATTERINO_REQUIRE_CLEAN_GIT: On
  C2_BUILD_WITH_QT6: Off

jobs:
  build:
    name: "Build ${{ matrix.os }}, Qt ${{ matrix.qt-version }} (PCH:${{ matrix.pch }}, LTO:${{ matrix.force-lto }})"
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
        qt-version: [5.15.2, 5.12.12]
        pch: [true]
        force-lto: [false]
        skip_artifact: ["no"]
        crashpad: [true]
        include:
          # Ubuntu 20.04, Qt 5.12
          - os: ubuntu-20.04
            qt-version: 5.12.12
            pch: true
            force-lto: false
          # Ubuntu 22.04, Qt 5.15
          - os: ubuntu-22.04
            qt-version: 5.15.2
            pch: true
            force-lto: false
          # Ubuntu 22.04, Qt 6.2.4
          - os: ubuntu-22.04
            qt-version: 6.2.4
            pch: false
            force-lto: false
          # Test for disabling Precompiled Headers & enabling link-time optimization
          - os: ubuntu-22.04
            qt-version: 5.15.2
            pch: false
            force-lto: true
            skip_artifact: "yes"
      fail-fast: false

    steps:
      - name: Force LTO
        if: matrix.force-lto == true
        run: |
          echo "C2_ENABLE_LTO=ON" >> "$GITHUB_ENV"
        shell: bash

      - name: Set Crashpad
        if: matrix.crashpad == true
        run: |
          echo "C2_ENABLE_CRASHPAD=ON" >> "$GITHUB_ENV"
        shell: bash

      - name: Set environment variables for windows-latest
        if: matrix.os == 'windows-latest'
        run: |
          echo "vs_version=2022" >> "$GITHUB_ENV"
        shell: bash

      - name: Set BUILD_WITH_QT6
        if: startsWith(matrix.qt-version, '6.')
        run: |
          echo "C2_BUILD_WITH_QT6=ON" >> "$GITHUB_ENV"
        shell: bash

      - uses: actions/checkout@v3
        with:
          submodules: recursive
          fetch-depth: 0 # allows for tags access

      - name: Install Qt5
        if: startsWith(matrix.qt-version, '5.')
        uses: jurplel/install-qt-action@v3.1.0
        with:
          cache: true
          cache-key-prefix: ${{ runner.os }}-QtCache-${{ matrix.qt-version }}-v2
          version: ${{ matrix.qt-version }}

      - name: Install Qt6
        if: startsWith(matrix.qt-version, '6.')
        uses: jurplel/install-qt-action@v3.1.0
        with:
          cache: true
          cache-key-prefix: ${{ runner.os }}-QtCache-${{ matrix.qt-version }}-v2
          modules: qt5compat
          version: ${{ matrix.qt-version }}

      # LINUX
      - name: Install dependencies (Ubuntu)
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          sudo apt-get update
          sudo apt-get -y install \
              cmake \
              virtualenv \
              rapidjson-dev \
              libfuse2 \
              libssl-dev \
              libboost-dev \
              libxcb-randr0-dev \
              libboost-system-dev \
              libboost-filesystem-dev \
              libpulse-dev \
              libxkbcommon-x11-0 \
              build-essential \
              libgl1-mesa-dev \
              libxcb-icccm4 \
              libxcb-image0 \
              libxcb-keysyms1 \
              libxcb-render-util0 \
              libxcb-xinerama0

      - name: Apply Qt patches (Ubuntu)
        if: startsWith(matrix.os, 'ubuntu') && startsWith(matrix.qt-version, '5.')
        run: |
          patch "$Qt5_DIR/include/QtConcurrent/qtconcurrentthreadengine.h" .patches/qt5-on-newer-gcc.patch
        shell: bash

      - name: Build (Ubuntu)
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          mkdir build
          cd build
          CXXFLAGS=-fno-sized-deallocation cmake \
            -DCMAKE_INSTALL_PREFIX=appdir/usr/ \
            -DCMAKE_BUILD_TYPE=Release \
            -DPAJLADA_SETTINGS_USE_BOOST_FILESYSTEM=On \
            -DUSE_PRECOMPILED_HEADERS=${{ matrix.pch }} \
            -DCMAKE_EXPORT_COMPILE_COMMANDS=On \
            -DCHATTERINO_LTO="$C2_ENABLE_LTO" \
            -DBUILD_WITH_QT6="$C2_BUILD_WITH_QT6" \
            ..
          make -j"$(nproc)"
        shell: bash

      - name: clang-tidy review
        if: (startsWith(matrix.os, 'ubuntu') && matrix.pch == false && matrix.qt-version == '5.15.2' && github.event_name == 'pull_request')
        uses: ZedThree/clang-tidy-review@v0.12.2
        with:
          build_dir: build
          config_file: ".clang-tidy"
          split_workflow: true
          exclude: "tests/*,lib/*"

      - name: clang-tidy-review upload
        if: (startsWith(matrix.os, 'ubuntu') && matrix.pch == false && matrix.qt-version == '5.15.2' && github.event_name == 'pull_request')
        uses: ZedThree/clang-tidy-review/upload@v0.12.2

      - name: Package - AppImage (Ubuntu)
        if: startsWith(matrix.os, 'ubuntu-20.04') && matrix.skip_artifact != 'yes'
        run: |
          cd build
          sh ./../.CI/CreateAppImage.sh
        shell: bash

      - name: Package - .deb (Ubuntu)
        if: startsWith(matrix.os, 'ubuntu') && matrix.skip_artifact != 'yes'
        run: |
          cd build
          sh ./../.CI/CreateUbuntuDeb.sh
        shell: bash

      - name: Upload artifact - AppImage (Ubuntu)
        if: startsWith(matrix.os, 'ubuntu-20.04') && matrix.skip_artifact != 'yes'
        uses: actions/upload-artifact@v3
        with:
          name: Chatterino-x86_64-${{ matrix.qt-version }}.AppImage
          path: build/Chatterino-x86_64.AppImage

      - name: Upload artifact - .deb (Ubuntu)
        if: startsWith(matrix.os, 'ubuntu') && matrix.skip_artifact != 'yes'
        uses: actions/upload-artifact@v3
        with:
          name: Chatterino-${{ matrix.os }}-Qt-${{ matrix.qt-version }}.deb
          path: build/Chatterino-${{ matrix.os }}-x86_64.deb

  create-release:
    needs: build
    runs-on: ubuntu-latest
    if: (github.event_name == 'push' && github.ref == 'refs/heads/master')

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # allows for tags access
      - uses: actions/download-artifact@v3
        with:
          name: chatterino-windows-x86-64-5.15.2.zip
          path: release-artifacts/

      - uses: actions/download-artifact@v3
        with:
          name: chatterino-windows-x86-64-5.15.2-symbols.pdb.7z
          path: release-artifacts/

      - uses: actions/download-artifact@v3
        with:
          name: Chatterino-x86_64-5.12.12.AppImage
          path: release-artifacts/

      - uses: actions/download-artifact@v3
        with:
          name: Chatterino-ubuntu-20.04-Qt-5.12.12.deb
          path: release-artifacts/

      - uses: actions/download-artifact@v3
        with:
          name: Chatterino-ubuntu-22.04-Qt-5.15.2.deb
          path: release-artifacts/

      - uses: actions/download-artifact@v3
        with:
          name: chatterino-osx-5.15.2.dmg
          path: release-artifacts/

      - name: Copy flatpakref
        run: |
          cp .CI/chatterino-nightly.flatpakref release-artifacts/
        shell: bash

      - name: Create release
        uses: ncipollo/release-action@v1.12.0
        with:
          removeArtifacts: true
          allowUpdates: true
          artifactErrorsFailBuild: true
          artifacts: "release-artifacts/*"
          body: ${{ github.event.head_commit.message }}
          prerelease: true
          name: Nightly Release
          tag: nightly-build

      - name: Update nightly-build tag
        run: |
          git tag -f nightly-build
          git push -f origin nightly-build
        shell: bash
